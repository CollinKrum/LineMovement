You’re fixing a monorepo with client/, server/, and shared/.
Goal: build the backend on Render by running npm install && npm run build inside server/. TypeScript must successfully compile server and import code from ../shared.

Make these changes:

server/index.ts

Change the import line to use type-only imports to satisfy verbatimModuleSyntax:

import express, { type Request, type Response, type NextFunction } from "express";


Keep CORS + /health. Keep registerRoutes(app). End with:

const port = parseInt(process.env.PORT || "8080", 10);
app.listen(port, "0.0.0.0", () => console.log(`API listening on :${port}`));


Ensure index.ts does not import ./vite or ./replitAuth.

server/routes.ts

Remove any imports/usage of replitAuth and anything auth-related for now.

registerRoutes(app) should return app (Express), not a Promise or HTTP server.

server/tsconfig.json

Replace content with:

{
  "compilerOptions": {
    "outDir": "./dist",
    "target": "ES2022",
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "skipLibCheck": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "verbatimModuleSyntax": true,
    "types": ["node"],
    "baseUrl": ".",
    "paths": {
      "@shared/*": ["../shared/*"],
      "drizzle-orm": ["./node_modules/drizzle-orm"],
      "drizzle-orm/*": ["./node_modules/drizzle-orm/*"],
      "drizzle-zod": ["./node_modules/drizzle-zod"],
      "zod": ["./node_modules/zod"]
    }
  },
  "include": [
    "./index.ts",
    "./routes.ts",
    "./db.ts",
    "./storage.ts",
    "./services/**/*.ts",
    "../shared/**/*.ts"
  ],
  "exclude": [
    "./vite.ts",
    "./replitAuth.ts",
    "../client/**",
    "../vite.config.ts",
    "../node_modules/**"
  ]
}


Reason: TypeScript is compiling files in ../shared, which import drizzle-orm, zod, etc. Since those packages are installed in server/node_modules, we need explicit paths so the compiler can resolve them from the server package. Keep moduleResolution: "Bundler" so we don’t need .js extensions.

server/package.json

Ensure it contains these deps so Render installs everything at server/:

{
  "name": "linetracker-server",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "tsc -p ./tsconfig.json",
    "start": "node dist/index.js"
  },
  "dependencies": {
    "@neondatabase/serverless": "^0.10.1",
    "@types/cors": "^2.8.17",
    "@types/express": "^4.17.21",
    "@types/ws": "^8.5.10",
    "cors": "^2.8.5",
    "drizzle-orm": "^0.38.0",
    "drizzle-zod": "^0.7.1",
    "express": "^4.19.2",
    "ws": "^8.17.1",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "typescript": "^5.6.3"
  }
}


server/db.ts (Neon + Drizzle init)

If you’re passing { client: pool, schema } to drizzle(...), change to:

import { drizzle } from "drizzle-orm/neon-serverless";
import { neon } from "@neondatabase/serverless";
import * as schema from "@shared/schema";
const sql = neon(process.env.DATABASE_URL!);
export const db = drizzle({ client: sql, schema }); // or drizzle(sql, { schema }) depending on your version


Pick the signature that matches drizzle-orm@^0.38.0 — if types complain, switch to drizzle(sql, { schema }). The goal is to remove the old client: error.

Ensure no file imports ./vite or ./replitAuth. Comment out any such imports.